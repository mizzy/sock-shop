AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Resources required to run the Weaveworks Sock Shop app on an ECS cluster with
  Fargate.  This includes the SignalFx Smart Agent for each task and Splunk integration.
Mappings: 
  VpcCidrs:
    vpc:
      cidr: 172.31.0.0/16
    pubsubnet1:
      cidr: 172.31.0.0/24
    pubsubnet2:
      cidr: 172.31.1.0/24
  SqlImporterAmiIds:
    us-east-1:
      ImageId: ami-0b33d91d
    us-east-2:
      ImageId: ami-c55673a0
    us-west-1:
      ImageId: ami-f173cc91
    us-west-2:
      ImageId: ami-165a0876
    eu-west-1:
      ImageId: ami-70edb016
    eu-central-1:
      ImageId: ami-af0fc0c0
    ap-northeast-1:
      ImageId: ami-56d4ad31
    ap-southeast-1:
      ImageId: ami-dc9339bf
    ap-southeast-2:
      ImageId: ami-1c47407f
  SplunkImporterAmiId:
    us-east-1: 
      ImageId: ami-0a9a2a150c7b518b7
    us-east-2:
      ImageId: ami-0e3a9a7a390823afa
    us-west-1:
      ImageId: ami-0cec93a7660844d8e
    us-west-2:
      ImageId: ami-02a3816df4dda2fed
    eu-west-1: 
      ImageId: ami-0678bcdd647f5e814
    eu-central-1:
      ImageId: ami-09b195dc2f2b8bc13
    ap-northeast-1:
      ImageId: ami-01da73ba5e74624bb
    ap-southeast-1:
      ImageId: ami-0ded7a8f1fa8b7033
    ap-southeast-2:
      ImageId: ami-08f60470f6bae148b
Parameters:
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: >-
      Name of an existing EC2 KeyPair to enable SSH access to the SQLImporter
      EC2 instance (if none appear in drop-down menu, you need to create one)
    MinLength: '1'
    ConstraintDescription: must be the name of an existing EC2 KeyPair. 
  Realm:
    Type: String
    Description: SignalFx realm to send data to
    AllowedValues:
    - us0
    - us1
    - us2
    - eu0
    - ap0
  InstanceType:
    Description: Splunk EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge 
Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref 'AWS::StackName'
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: sfx_access_token
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:GetParameters"
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sfx_access_token"
  Vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !FindInMap 
        - VpcCidrs
        - vpc
        - cidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
  DhcpOptionsLocal:
    Type: AWS::EC2::DHCPOptions
    Properties: 
        DomainName: local
        DomainNameServers: 
          - AmazonProvidedDNS
  VpcDhcpAssoc:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref Vpc
      DhcpOptionsId: !Ref DhcpOptionsLocal
  LocalNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: local
      Vpc: !Ref Vpc
  PubSubnetAz1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap 
        - VpcCidrs
        - pubsubnet1
        - cidr
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs 
          Ref: 'AWS::Region'
  PubSubnetAz2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap 
        - VpcCidrs
        - pubsubnet2
        - cidr
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs 
          Ref: 'AWS::Region'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  RouteViaIgw:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
  PublicRouteViaIgw:
    DependsOn: AttachGateway
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteViaIgw
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PubSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PubSubnetAz1
      RouteTableId: !Ref RouteViaIgw
  PubSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PubSubnetAz2
      RouteTableId: !Ref RouteViaIgw
  ElbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ELB Allowed Ports
      VpcId: !Ref Vpc
  ElbSecurityGroupIngressAppPort:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref ElbSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
  EcsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ECS Allowed Ports
      VpcId: !Ref Vpc
  EcsSecurityGroupIngressSshPort:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0
  EcsSecurityGroupElb:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref EcsSecurityGroup
      SourceSecurityGroupId: !Ref ElbSecurityGroup
      IpProtocol: '-1'
  EcsSecurityGroupBackEnd:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref EcsSecurityGroup
      SourceSecurityGroupId: !Ref EcsSecurityGroup
      IpProtocol: '-1'
  SplunkSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: 'Splunk external ports'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
  SplunkSecurityGroupEcsPorts:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SplunkSecurityGroup
      SourceSecurityGroupId: !Ref EcsSecurityGroup
      IpProtocol: '-1'
  SplunkSecurityGroupElbPorts:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SplunkSecurityGroup
      SourceSecurityGroupId: !Ref ElbSecurityGroup
      IpProtocol: '-1'
  SplunkInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap 
        - SplunkImporterAmiId
        - !Ref 'AWS::Region'
        - ImageId
      InstanceType: !Ref InstanceType
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          GroupSet:
            - !Ref SplunkSecurityGroup
          SubnetId: !Ref PubSubnetAz1
          PrivateIpAddress: 172.31.0.212
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: role
          Value: splunk
        - Key: Name
          Value: splunk
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 50
      UserData: 
        Fn::Base64:
          !Sub |
            #!/bin/bash
            mkdir /opt/splunk/etc/apps/splunk_httpinput
            mkdir /opt/splunk/etc/apps/splunk_httpinput/local
            touch /opt/splunk/etc/apps/splunk_httpinput/local/inputs.conf
            echo "[http]" >> /opt/splunk/etc/apps/splunk_httpinput/local/inputs.conf
            echo "disabled = 0" >> /opt/splunk/etc/apps/splunk_httpinput/local/inputs.conf
            echo -e "\n[http://sockshop]" >> /opt/splunk/etc/apps/splunk_httpinput/local/inputs.conf
            echo "token = 7f290a2b-c2b0-48b5-94e7-ede29475dcea" >> /opt/splunk/etc/apps/splunk_httpinput/local/inputs.conf
            chown -R splunk:splunk /opt/splunk/etc/apps/splunk_httpinput
  CatalogueRDS:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Delete
    Properties:
      AllocatedStorage: '100'
      DBInstanceClass: db.t2.medium
      DBName: socksdb
      Engine: MySQL
      MasterUsername: catalogue_user
      MasterUserPassword: default_password
      VPCSecurityGroups:
        - !Ref DBEC2SecurityGroup
      DBSubnetGroupName: !Ref myDBSubnetGroup
  SQLImporter:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap 
        - SqlImporterAmiIds
        - !Ref 'AWS::Region'
        - ImageId
      InstanceType: t2.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          GroupSet:
            - !Ref EcsSecurityGroup
          SubnetId: !Ref PubSubnetAz1
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - 'RDS Importer - '
              - !Ref 'AWS::StackName'
      KeyName: !Ref KeyName
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap
            - |
              # Install the files and packages from the metadata
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource SQLImporter'
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              # Signal the status from cfn-init
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource SQLImporter'
            - '         --region '
            - !Ref 'AWS::Region'
            - |+
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          packages:
            yum:
              mysql: []
          commands:
            get:
              command: >-
                wget
                https://raw.githubusercontent.com/microservices-demo/catalogue/master/docker/catalogue-db/data/dump.sql
            import:
              command: >-
                mysql -u catalogue_user --password=default_password -h $SOCKS_DB
                -f -D socksdb < dump.sql 
              env:
                SOCKS_DB: !GetAtt 
                  - CatalogueRDS
                  - Endpoint.Address
  DBEC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EcsSecurityGroup
      VpcId: !Ref Vpc
  myDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: description
      SubnetIds:
        - !Ref PubSubnetAz1
        - !Ref PubSubnetAz2
  EcsCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: sockshop-fargate
  CartsDBTask:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Image: mongo
          Essential: true
          Name: carts-db
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          PortMappings:
            - ContainerPort: 27017
          DockerLabels:
            "agent.signalfx.com.port.27017": "true"
        - Image: quay.io/signalfx/signalfx-agent:5.1.4
          Name: carts-db-agent
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          EntryPoint:
            - bash
            - "-c"
          Command:
            - "read -d '.' -a HOST <<< \"$HOSTNAME\" && export SFX_HOSTNAME=sockshop-carts-db-$HOST && curl --fail $CONFIG_URL > /etc/signalfx/agent.yaml && exec /bin/signalfx-agent"
          Environment:
            - Name: SFX_REALM
              Value: !Ref Realm
            - Name: CONFIG_URL
              Value: "https://raw.githubusercontent.com/signalfx/sock-shop/master/ecs-fargate/agent.yaml"
          Secrets:
            - Name: ACCESS_TOKEN
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sfx_access_token"
      Volumes: []
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      Memory: '512'
      Cpu: '256'
  CartsDBDns:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 10
            Type: A
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: carts-db
      NamespaceId: !Ref LocalNamespace
  CartsDBService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !Ref PubSubnetAz1
            - !Ref PubSubnetAz2
      ServiceRegistries:
        - RegistryArn: !GetAtt CartsDBDns.Arn
      TaskDefinition: !Ref CartsDBTask
  CartsTask:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Image: marksfink/sockshop-carts:0.4.8-bad
          Essential: true
          Name: carts
          EntryPoint:
            - /bin/sh
            - "-c"
          Command:
            - "java $JAVA_OPTS -jar ./app.jar --port=80"
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          Environment:
            - Name: SIGNALFX_SERVICE_NAME
              Value: 'carts'
            - Name: JAVA_OPTS
              Value: '-javaagent:signalfx-tracing.jar -Xms32m -Xmx64m'
          PortMappings:
            - ContainerPort: 80
        - Image: quay.io/signalfx/signalfx-agent:5.1.4
          Name: carts-agent
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          EntryPoint:
            - bash
            - "-c"
          Command:
            - "read -d '.' -a HOST <<< \"$HOSTNAME\" && export SFX_HOSTNAME=sockshop-carts-$HOST && curl --fail $CONFIG_URL > /etc/signalfx/agent.yaml && exec /bin/signalfx-agent"
          Environment:
            - Name: SFX_REALM
              Value: !Ref Realm
            - Name: CONFIG_URL
              Value: "https://raw.githubusercontent.com/signalfx/sock-shop/master/ecs-fargate/agent.yaml"
          Secrets:
            - Name: ACCESS_TOKEN
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sfx_access_token"
      Volumes: []
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      Memory: '512'
      Cpu: '256'
  CartsDns:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 10
            Type: A
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: carts
      NamespaceId: !Ref LocalNamespace
  CartsService:
    Type: 'AWS::ECS::Service'
    DependsOn: 
    - CartsDBService
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !Ref PubSubnetAz1
            - !Ref PubSubnetAz2
      TaskDefinition: !Ref CartsTask
      ServiceRegistries:
        - RegistryArn: !GetAtt CartsDns.Arn
  CatalogueTask:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Image: marksfink/sockshop-catalogue:0.3.5-sfx
          Essential: true
          Name: catalogue
          Command:
            - /app
            - '-port=80'
            - !Join 
              - ''
              - - '-DSN='
                - 'catalogue_user:default_password@tcp('
                - !GetAtt 
                  - CatalogueRDS
                  - Endpoint.Address
                - ':'
                - !GetAtt 
                  - CatalogueRDS
                  - Endpoint.Port
                - )/socksdb
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          Environment:
            - Name: SIGNALFX_SERVICE_NAME
              Value: "catalogue"
            - Name: SIGNALFX_ENDPOINT_URL
              Value: http://localhost:9080/v1/trace
            - Name: DD_PROPAGATION_STYLE_INJECT
              Value: "B3"
            - Name: DD_PROPAGATION_STYLE_EXTRACT
              Value: "B3"
          PortMappings:
            - ContainerPort: 80
        - Image: quay.io/signalfx/signalfx-agent:5.1.4
          Name: catalogue-agent
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          EntryPoint:
            - bash
            - "-c"
          Command:
            - "read -d '.' -a HOST <<< \"$HOSTNAME\" && export SFX_HOSTNAME=sockshop-catalogue-$HOST && curl --fail $CONFIG_URL > /etc/signalfx/agent.yaml && exec /bin/signalfx-agent"
          Environment:
            - Name: SFX_REALM
              Value: !Ref Realm
            - Name: CONFIG_URL
              Value: "https://raw.githubusercontent.com/signalfx/sock-shop/master/ecs-fargate/agent.yaml"
          Secrets:
            - Name: ACCESS_TOKEN
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sfx_access_token"
      Volumes: []
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      Memory: '512'
      Cpu: '256'
  CatalogueDns:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 10
            Type: A
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: catalogue
      NamespaceId: !Ref LocalNamespace
  CatalogueService:
    Type: 'AWS::ECS::Service'
    DependsOn:
    - SQLImporter
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !Ref PubSubnetAz1
            - !Ref PubSubnetAz2
      TaskDefinition: !Ref CatalogueTask
      ServiceRegistries:
        - RegistryArn: !GetAtt CatalogueDns.Arn
  FrontEndElb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AttachGateway
    Properties:
      Name: sockshop
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - !Ref PubSubnetAz1
        - !Ref PubSubnetAz2
      SecurityGroups:
        - !Ref ElbSecurityGroup
  FrontEndTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      Port: 8079
      Protocol: HTTP
      HealthCheckPath: /metrics
      VpcId: !Ref Vpc
  FrontEndListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref FrontEndTargetGroup
          Type: 'forward'
      LoadBalancerArn: !Ref FrontEndElb
      Port: 80
      Protocol: HTTP
  FrontEndListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref FrontEndTargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values: ['*']
      ListenerArn: !Ref FrontEndListener
      Priority: 1
  FrontEndTask:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Image: marksfink/sockshop-front-end:0.3.12-sfx
          Essential: true
          Name: front-end
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          Environment:
            - Name: SESSION_REDIS
              Value: 'true'
            - Name: SIGNALFX_SERVICE_NAME
              Value: 'front-end'
          PortMappings:
            - ContainerPort: 8079
        - Image: quay.io/signalfx/signalfx-agent:5.1.4
          Name: front-end-agent
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          EntryPoint:
            - bash
            - "-c"
          Command:
            - "read -d '.' -a HOST <<< \"$HOSTNAME\" && export SFX_HOSTNAME=sockshop-front-end-$HOST && curl --fail $CONFIG_URL > /etc/signalfx/agent.yaml && exec /bin/signalfx-agent"
          Environment:
            - Name: SFX_REALM
              Value: !Ref Realm
            - Name: CONFIG_URL
              Value: "https://raw.githubusercontent.com/signalfx/sock-shop/master/ecs-fargate/agent.yaml"
          Secrets:
            - Name: ACCESS_TOKEN
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sfx_access_token"
      Volumes: []
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      Memory: '512'
      Cpu: '256'
  FrontEndDns:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 10
            Type: A
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: front-end
      NamespaceId: !Ref LocalNamespace
  FrontEndService:
    Type: 'AWS::ECS::Service'
    DependsOn:
    - FrontEndListenerRule
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: front-end
          ContainerPort: 8079
          TargetGroupArn: !Ref FrontEndTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !Ref PubSubnetAz1
            - !Ref PubSubnetAz2
      TaskDefinition: !Ref FrontEndTask
      ServiceRegistries:
        - RegistryArn: !GetAtt FrontEndDns.Arn
  SessionDBTask:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Image: 'redis:alpine'
          Essential: true
          Name: session-db
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          PortMappings:
            - ContainerPort: 6379
          DockerLabels:
            "agent.signalfx.com.port.6379": "true"
        - Image: quay.io/signalfx/signalfx-agent:5.1.4
          Name: session-db-agent
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          EntryPoint:
            - bash
            - "-c"
          Command:
            - "read -d '.' -a HOST <<< \"$HOSTNAME\" && export SFX_HOSTNAME=sockshop-session-db-$HOST && curl --fail $CONFIG_URL > /etc/signalfx/agent.yaml && exec /bin/signalfx-agent"
          Environment:
            - Name: SFX_REALM
              Value: !Ref Realm
            - Name: CONFIG_URL
              Value: "https://raw.githubusercontent.com/signalfx/sock-shop/master/ecs-fargate/agent.yaml"
          Secrets:
            - Name: ACCESS_TOKEN
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sfx_access_token"
      Volumes: []
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      Memory: '512'
      Cpu: '256'
  SessionDBDns:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 10
            Type: A
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: session-db
      NamespaceId: !Ref LocalNamespace
  SessionDBService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !Ref PubSubnetAz1
            - !Ref PubSubnetAz2
      TaskDefinition: !Ref SessionDBTask
      ServiceRegistries:
        - RegistryArn: !GetAtt SessionDBDns.Arn
  UserTask:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Image: marksfink/sockshop-user:0.4.7-sfx
          Essential: true
          Name: user
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          Environment:
            - Name: SIGNALFX_SERVICE_NAME
              Value: "user"
            - Name: SIGNALFX_ENDPOINT_URL
              Value: http://localhost:9080/v1/trace
            - Name: DD_PROPAGATION_STYLE_INJECT
              Value: "B3"
            - Name: DD_PROPAGATION_STYLE_EXTRACT
              Value: "B3"
          PortMappings:
            - ContainerPort: 80
        - Image: quay.io/signalfx/signalfx-agent:5.1.4
          Name: user-agent
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          EntryPoint:
            - bash
            - "-c"
          Command:
            - "read -d '.' -a HOST <<< \"$HOSTNAME\" && export SFX_HOSTNAME=sockshop-user-$HOST && curl --fail $CONFIG_URL > /etc/signalfx/agent.yaml && exec /bin/signalfx-agent"
          Environment:
            - Name: SFX_REALM
              Value: !Ref Realm
            - Name: CONFIG_URL
              Value: "https://raw.githubusercontent.com/signalfx/sock-shop/master/ecs-fargate/agent.yaml"
          Secrets:
            - Name: ACCESS_TOKEN
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sfx_access_token"
      Volumes: []
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      Memory: '512'
      Cpu: '256'
  UserDns:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 10
            Type: A
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: user
      NamespaceId: !Ref LocalNamespace
  UserService:
    Type: 'AWS::ECS::Service'
    DependsOn:
    - UserDBService
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !Ref PubSubnetAz1
            - !Ref PubSubnetAz2
      TaskDefinition: !Ref UserTask
      ServiceRegistries:
        - RegistryArn: !GetAtt UserDns.Arn
  UserDBTask:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Image: weaveworksdemos/user-db
          Essential: true
          Name: user-db
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          PortMappings:
            - ContainerPort: 27017
          DockerLabels:
            "agent.signalfx.com.port.27017": "true"
        - Image: quay.io/signalfx/signalfx-agent:5.1.4
          Name: user-db-agent
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          EntryPoint:
            - bash
            - "-c"
          Command:
            - "read -d '.' -a HOST <<< \"$HOSTNAME\" && export SFX_HOSTNAME=sockshop-user-db-$HOST && curl --fail $CONFIG_URL > /etc/signalfx/agent.yaml && exec /bin/signalfx-agent"
          Environment:
            - Name: SFX_REALM
              Value: !Ref Realm
            - Name: CONFIG_URL
              Value: "https://raw.githubusercontent.com/signalfx/sock-shop/master/ecs-fargate/agent.yaml"
          Secrets:
            - Name: ACCESS_TOKEN
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sfx_access_token"
      Volumes: []
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      Memory: '512'
      Cpu: '256'
  UserDBDns:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 10
            Type: A
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: user-db
      NamespaceId: !Ref LocalNamespace
  UserDBService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !Ref PubSubnetAz1
            - !Ref PubSubnetAz2
      TaskDefinition: !Ref UserDBTask
      ServiceRegistries:
        - RegistryArn: !GetAtt UserDBDns.Arn
  OrdersDBTask:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Image: mongo
          Essential: true
          Name: orders-db
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          PortMappings:
            - ContainerPort: 27017
          DockerLabels:
            "agent.signalfx.com.port.27017": "true"
        - Image: quay.io/signalfx/signalfx-agent:5.1.4
          Name: orders-db-agent
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          EntryPoint:
            - bash
            - "-c"
          Command:
            - "read -d '.' -a HOST <<< \"$HOSTNAME\" && export SFX_HOSTNAME=sockshop-orders-db-$HOST && curl --fail $CONFIG_URL > /etc/signalfx/agent.yaml && exec /bin/signalfx-agent"
          Environment:
            - Name: SFX_REALM
              Value: !Ref Realm
            - Name: CONFIG_URL
              Value: "https://raw.githubusercontent.com/signalfx/sock-shop/master/ecs-fargate/agent.yaml"
          Secrets:
            - Name: ACCESS_TOKEN
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sfx_access_token"
      Volumes: []
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      Memory: '512'
      Cpu: '256'
  OrdersDBDns:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 10
            Type: A
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: orders-db
      NamespaceId: !Ref LocalNamespace
  OrdersDBService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !Ref PubSubnetAz1
            - !Ref PubSubnetAz2
      TaskDefinition: !Ref OrdersDBTask
      ServiceRegistries:
        - RegistryArn: !GetAtt OrdersDBDns.Arn
  OrdersTask:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Image: marksfink/sockshop-orders:0.4.7-sfx
          Essential: true
          Name: orders
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          Environment:
          - Name: SIGNALFX_SERVICE_NAME
            Value: 'orders'
          - Name: JAVA_OPTS
            Value: '-javaagent:signalfx-tracing.jar -Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom'
          PortMappings:
            - ContainerPort: 80
        - Image: quay.io/signalfx/signalfx-agent:5.1.4
          Name: orders-agent
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          EntryPoint:
            - bash
            - "-c"
          Command:
            - "read -d '.' -a HOST <<< \"$HOSTNAME\" && export SFX_HOSTNAME=sockshop-orders-$HOST && curl --fail $CONFIG_URL > /etc/signalfx/agent.yaml && exec /bin/signalfx-agent"
          Environment:
            - Name: SFX_REALM
              Value: !Ref Realm
            - Name: CONFIG_URL
              Value: "https://raw.githubusercontent.com/signalfx/sock-shop/master/ecs-fargate/agent.yaml"
          Secrets:
            - Name: ACCESS_TOKEN
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sfx_access_token"
      Volumes: []
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      Memory: '512'
      Cpu: '256'
  OrdersDns:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 10
            Type: A
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: orders
      NamespaceId: !Ref LocalNamespace
  OrdersService:
    Type: 'AWS::ECS::Service'
    DependsOn:
    - OrdersDBService
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !Ref PubSubnetAz1
            - !Ref PubSubnetAz2
      TaskDefinition: !Ref OrdersTask
      ServiceRegistries:
        - RegistryArn: !GetAtt OrdersDns.Arn
  PaymentTask:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Image: marksfink/sockshop-payment:0.4.3-sfx
          Essential: true
          Name: payment
          Command:
            - /app/main
            - '-port=80'
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          Environment:
            - Name: SIGNALFX_SERVICE_NAME
              Value: "payment"
            - Name: SIGNALFX_ENDPOINT_URL
              Value: http://localhost:9080/v1/trace
            - Name: DD_PROPAGATION_STYLE_INJECT
              Value: "B3"
            - Name: DD_PROPAGATION_STYLE_EXTRACT
              Value: "B3"
          PortMappings:
            - ContainerPort: 80
        - Image: quay.io/signalfx/signalfx-agent:5.1.4
          Name: payment-agent
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          EntryPoint:
            - bash
            - "-c"
          Command:
            - "read -d '.' -a HOST <<< \"$HOSTNAME\" && export SFX_HOSTNAME=sockshop-payment-$HOST && curl --fail $CONFIG_URL > /etc/signalfx/agent.yaml && exec /bin/signalfx-agent"
          Environment:
            - Name: SFX_REALM
              Value: !Ref Realm
            - Name: CONFIG_URL
              Value: "https://raw.githubusercontent.com/signalfx/sock-shop/master/ecs-fargate/agent.yaml"
          Secrets:
            - Name: ACCESS_TOKEN
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sfx_access_token"
      Volumes: []
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      Memory: '512'
      Cpu: '256'
  PaymentDns:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 10
            Type: A
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: payment
      NamespaceId: !Ref LocalNamespace
  PaymentService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !Ref PubSubnetAz1
            - !Ref PubSubnetAz2
      TaskDefinition: !Ref PaymentTask
      ServiceRegistries:
        - RegistryArn: !GetAtt PaymentDns.Arn
  QueueMasterTask:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Image: marksfink/sockshop-queue-master:0.3.1-sfx
          Essential: true
          Name: queue-master
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          Environment:
            - Name: SIGNALFX_SERVICE_NAME
              Value: 'queue-master'
            - Name: JAVA_OPTS
              Value: '-javaagent:signalfx-tracing.jar -Djava.security.egd=file:/dev/urandom'
          MountPoints:
            - ContainerPath: /var/run/docker.sock
              SourceVolume: VarRunDocker_Sock
          PortMappings:
            - ContainerPort: 80
        - Image: quay.io/signalfx/signalfx-agent:5.1.4
          Name: queue-master-agent
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          EntryPoint:
            - bash
            - "-c"
          Command:
            - "read -d '.' -a HOST <<< \"$HOSTNAME\" && export SFX_HOSTNAME=sockshop-queue-master-$HOST && curl --fail $CONFIG_URL > /etc/signalfx/agent.yaml && exec /bin/signalfx-agent"
          Environment:
            - Name: SFX_REALM
              Value: !Ref Realm
            - Name: CONFIG_URL
              Value: "https://raw.githubusercontent.com/signalfx/sock-shop/master/ecs-fargate/agent.yaml"
          Secrets:
            - Name: ACCESS_TOKEN
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sfx_access_token"
      Volumes:
        - Host: {}
          Name: VarRunDocker_Sock
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      Memory: '1024'
      Cpu: '512'
  QueueMasterDns:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 10
            Type: A
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: queue-master
      NamespaceId: !Ref LocalNamespace
  QueueMasterService:
    Type: 'AWS::ECS::Service'
    DependsOn:
    - RabbitMQService
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !Ref PubSubnetAz1
            - !Ref PubSubnetAz2
      TaskDefinition: !Ref QueueMasterTask
      ServiceRegistries:
        - RegistryArn: !GetAtt QueueMasterDns.Arn
  RabbitMQTask:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Image: 'rabbitmq:3.6.8-management'
          Essential: true
          Name: rabbitmq
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          PortMappings:
            - ContainerPort: 5672
            - ContainerPort: 15672
          DockerLabels:
            "agent.signalfx.com.port.15672": "true"
        - Image: quay.io/signalfx/signalfx-agent:5.1.4
          Name: rabbitmq-agent
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          EntryPoint:
            - bash
            - "-c"
          Command:
            - "read -d '.' -a HOST <<< \"$HOSTNAME\" && export SFX_HOSTNAME=sockshop-rabbitmq-$HOST && curl --fail $CONFIG_URL > /etc/signalfx/agent.yaml && exec /bin/signalfx-agent"
          Environment:
            - Name: SFX_REALM
              Value: !Ref Realm
            - Name: CONFIG_URL
              Value: "https://raw.githubusercontent.com/signalfx/sock-shop/master/ecs-fargate/agent.yaml"
          Secrets:
            - Name: ACCESS_TOKEN
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sfx_access_token"
      Volumes: []
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      Memory: '512'
      Cpu: '256'
  RabbitMQDns:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 10
            Type: A
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: rabbitmq
      NamespaceId: !Ref LocalNamespace
  RabbitMQService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !Ref PubSubnetAz1
            - !Ref PubSubnetAz2
      TaskDefinition: !Ref RabbitMQTask
      ServiceRegistries:
        - RegistryArn: !GetAtt RabbitMQDns.Arn
  ShippingTask:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Image: marksfink/sockshop-shipping:0.4.8-sfx
          Essential: true
          Name: shipping
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          Environment:
            - Name: SIGNALFX_SERVICE_NAME
              Value: 'shipping'
            - Name: JAVA_OPTS
              Value: '-javaagent:signalfx-tracing.jar -Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom'
          PortMappings:
            - ContainerPort: 80
        - Image: quay.io/signalfx/signalfx-agent:5.1.4
          Name: shipping-agent
          LogConfiguration:
            LogDriver: splunk
            Options:
              splunk-url: https://172.31.0.212:8088
              splunk-token: 7f290a2b-c2b0-48b5-94e7-ede29475dcea
              tag: "{{.Name}}"
              splunk-insecureskipverify: "true"
          EntryPoint:
            - bash
            - "-c"
          Command:
            - "read -d '.' -a HOST <<< \"$HOSTNAME\" && export SFX_HOSTNAME=sockshop-shipping-$HOST && curl --fail $CONFIG_URL > /etc/signalfx/agent.yaml && exec /bin/signalfx-agent"
          Environment:
            - Name: SFX_REALM
              Value: !Ref Realm
            - Name: CONFIG_URL
              Value: "https://raw.githubusercontent.com/signalfx/sock-shop/master/ecs-fargate/agent.yaml"
          Secrets:
            - Name: ACCESS_TOKEN
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sfx_access_token"
      Volumes: []
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      Memory: '512'
      Cpu: '256'
  ShippingDns:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 10
            Type: A
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: shipping
      NamespaceId: !Ref LocalNamespace
  ShippingService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !Ref PubSubnetAz1
            - !Ref PubSubnetAz2
      TaskDefinition: !Ref ShippingTask
      ServiceRegistries:
        - RegistryArn: !GetAtt ShippingDns.Arn
Outputs:
  ApplicationURL:
    Description: "Application URL"
    Value: !Join ['', ['http://', !GetAtt [FrontEndElb, DNSName]]]
  SplunkURL:
    Description: "Splunk URL"
    Value: !Join ['', ['http://', !GetAtt [SplunkInstance, PublicDnsName], ':8000']]
  SplunkPassword:
    Description: "Splunk Credentials"
    Value: !Join ['', ['Username: admin Password: ', 'SPLUNK-', !Ref SplunkInstance]]
